
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__mpx_mlibman_dbus_proxy_hh__PROXY_MARSHAL_H
#define __dbusxx__mpx_mlibman_dbus_proxy_hh__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace info {
namespace backtrace {
namespace Youki {

class MLibMan_proxy
 : public ::DBus::InterfaceProxy
{
public:

    MLibMan_proxy()
    : ::DBus::InterfaceProxy("info.backtrace.Youki.MLibMan")
    {
        connect_signal(MLibMan_proxy, ScanStart, _ScanStart_stub);
        connect_signal(MLibMan_proxy, ScanEnd, _ScanEnd_stub);
        connect_signal(MLibMan_proxy, NewAlbum, _NewAlbum_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void ShowWindow()
    {
        ::DBus::CallMessage call;
        call.member("ShowWindow");
        ::DBus::Message ret = invoke_method(call);
    }

    void Exit()
    {
        ::DBus::CallMessage call;
        call.member("Exit");
        ::DBus::Message ret = invoke_method(call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void ScanStart() = 0;
    virtual void ScanEnd() = 0;
    virtual void NewAlbum(const int64_t& argin0, const std::string& argin1, const std::string& argin2, const std::string& argin3, const std::string& argin4, const std::string& argin5) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _ScanStart_stub(const ::DBus::SignalMessage &sig)
    {
        ScanStart();
    }
    void _ScanEnd_stub(const ::DBus::SignalMessage &sig)
    {
        ScanEnd();
    }
    void _NewAlbum_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int64_t arg0; ri >> arg0;
        std::string arg1; ri >> arg1;
        std::string arg2; ri >> arg2;
        std::string arg3; ri >> arg3;
        std::string arg4; ri >> arg4;
        std::string arg5; ri >> arg5;
        NewAlbum(arg0, arg1, arg2, arg3, arg4, arg5);
    }
};

} } } 
#endif//__dbusxx__mpx_mlibman_dbus_proxy_hh__PROXY_MARSHAL_H
