
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef YOUKI_MLIBMAN_DBUS_ACTUAL_HH 
#define YOUKI_MLIBMAN_DBUS_ACTUAL_HH 

#include <dbus-c++/dbus.h>
#include "mpx-mlibman-dbus-proxy.hh"

namespace info {
namespace backtrace {
namespace Youki {

class MLibMan_proxy_actual
: public info::backtrace::Youki::MLibMan_proxy 
, public DBus::ObjectProxy
{
public:

    MLibMan_proxy_actual(
        DBus::Connection conn
    )
    : DBus::ObjectProxy( conn, "/info/backtrace/Youki/MLibMan", "info.backtrace.Youki.MLibMan" )
    {
    }

public:

    typedef sigc::signal<void>  Signal_t ;

protected:

    Signal_t        SignalScanStart ;
    Signal_t        SignalScanEnd ;

public:

    Signal_t&
    signal_scan_start ()
    {
        return SignalScanStart ;
    }

    Signal_t
    signal_scan_end ()
    {
        return SignalScanEnd ;
    }

    /* signal handlers for this interface
     */
    virtual
    void ScanStart(
    )
    {
        SignalScanStart.emit() ;
    }

    virtual
    void ScanEnd(
    ) 
    {
        SignalScanEnd.emit() ;
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _ScanStart_stub(const ::DBus::SignalMessage &sig)
    {
        ScanStart();
    }
    void _ScanEnd_stub(const ::DBus::SignalMessage &sig)
    {
        ScanEnd();
    }
};

} } } 
#endif
