// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "xsd-artist-similar.hxx"

namespace LastFM
{
  // similarartists
  // 

  const similarartists::artist_sequence& similarartists::
  artist () const
  {
    return this->artist_;
  }

  similarartists::artist_sequence& similarartists::
  artist ()
  {
    return this->artist_;
  }

  void similarartists::
  artist (const artist_sequence& artist)
  {
    this->artist_ = artist;
  }

  const similarartists::streamable_optional& similarartists::
  streamable () const
  {
    return this->streamable_;
  }

  similarartists::streamable_optional& similarartists::
  streamable ()
  {
    return this->streamable_;
  }

  void similarartists::
  streamable (const streamable_type& streamable)
  {
    this->streamable_.set (streamable);
  }

  void similarartists::
  streamable (const streamable_optional& streamable)
  {
    this->streamable_ = streamable;
  }

  const similarartists::picture_optional& similarartists::
  picture () const
  {
    return this->picture_;
  }

  similarartists::picture_optional& similarartists::
  picture ()
  {
    return this->picture_;
  }

  void similarartists::
  picture (const picture_type& picture)
  {
    this->picture_.set (picture);
  }

  void similarartists::
  picture (const picture_optional& picture)
  {
    this->picture_ = picture;
  }

  void similarartists::
  picture (::std::auto_ptr< picture_type > picture)
  {
    this->picture_.set (picture);
  }

  const similarartists::mbid_optional& similarartists::
  mbid () const
  {
    return this->mbid_;
  }

  similarartists::mbid_optional& similarartists::
  mbid ()
  {
    return this->mbid_;
  }

  void similarartists::
  mbid (const mbid_type& mbid)
  {
    this->mbid_.set (mbid);
  }

  void similarartists::
  mbid (const mbid_optional& mbid)
  {
    this->mbid_ = mbid;
  }

  void similarartists::
  mbid (::std::auto_ptr< mbid_type > mbid)
  {
    this->mbid_.set (mbid);
  }


  // artist
  // 

  const artist::name_type& artist::
  name () const
  {
    return this->name_.get ();
  }

  artist::name_type& artist::
  name ()
  {
    return this->name_.get ();
  }

  void artist::
  name (const name_type& name)
  {
    this->name_.set (name);
  }

  void artist::
  name (::std::auto_ptr< name_type > name)
  {
    this->name_.set (name);
  }

  const artist::mbid_type& artist::
  mbid () const
  {
    return this->mbid_.get ();
  }

  artist::mbid_type& artist::
  mbid ()
  {
    return this->mbid_.get ();
  }

  void artist::
  mbid (const mbid_type& mbid)
  {
    this->mbid_.set (mbid);
  }

  void artist::
  mbid (::std::auto_ptr< mbid_type > mbid)
  {
    this->mbid_.set (mbid);
  }

  const artist::match_type& artist::
  match () const
  {
    return this->match_.get ();
  }

  artist::match_type& artist::
  match ()
  {
    return this->match_.get ();
  }

  void artist::
  match (const match_type& match)
  {
    this->match_.set (match);
  }

  const artist::url_type& artist::
  url () const
  {
    return this->url_.get ();
  }

  artist::url_type& artist::
  url ()
  {
    return this->url_.get ();
  }

  void artist::
  url (const url_type& url)
  {
    this->url_.set (url);
  }

  void artist::
  url (::std::auto_ptr< url_type > url)
  {
    this->url_.set (url);
  }

  const artist::image_small_type& artist::
  image_small () const
  {
    return this->image_small_.get ();
  }

  artist::image_small_type& artist::
  image_small ()
  {
    return this->image_small_.get ();
  }

  void artist::
  image_small (const image_small_type& image_small)
  {
    this->image_small_.set (image_small);
  }

  void artist::
  image_small (::std::auto_ptr< image_small_type > image_small)
  {
    this->image_small_.set (image_small);
  }

  const artist::image_type& artist::
  image () const
  {
    return this->image_.get ();
  }

  artist::image_type& artist::
  image ()
  {
    return this->image_.get ();
  }

  void artist::
  image (const image_type& image)
  {
    this->image_.set (image);
  }

  void artist::
  image (::std::auto_ptr< image_type > image)
  {
    this->image_.set (image);
  }

  const artist::streamable_type& artist::
  streamable () const
  {
    return this->streamable_.get ();
  }

  artist::streamable_type& artist::
  streamable ()
  {
    return this->streamable_.get ();
  }

  void artist::
  streamable (const streamable_type& streamable)
  {
    this->streamable_.set (streamable);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace LastFM
{
  // similarartists
  //

  similarartists::
  similarartists ()
  : ::xml_schema::type (),
    artist_ (::xml_schema::flags (), this),
    streamable_ (::xml_schema::flags (), this),
    picture_ (::xml_schema::flags (), this),
    mbid_ (::xml_schema::flags (), this)
  {
  }

  similarartists::
  similarartists (const similarartists& x,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    artist_ (x.artist_, f, this),
    streamable_ (x.streamable_, f, this),
    picture_ (x.picture_, f, this),
    mbid_ (x.mbid_, f, this)
  {
  }

  similarartists::
  similarartists (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    artist_ (f, this),
    streamable_ (f, this),
    picture_ (f, this),
    mbid_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void similarartists::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // artist
      //
      if (n.name () == "artist" && n.namespace_ () == "LastFM")
      {
        ::std::auto_ptr< artist_type > r (
          artist_traits::create (i, f, this));

        this->artist ().push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "streamable" && n.namespace_ ().empty ())
      {
        this->streamable (streamable_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "picture" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< picture_type > r (
          picture_traits::create (i, f, this));

        this->picture (r);
        continue;
      }

      if (n.name () == "mbid" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< mbid_type > r (
          mbid_traits::create (i, f, this));

        this->mbid (r);
        continue;
      }
    }
  }

  similarartists* similarartists::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new similarartists (*this, f, c);
  }

  // artist
  //

  artist::
  artist (const name_type& name,
          const mbid_type& mbid,
          const match_type& match,
          const url_type& url,
          const image_small_type& image_small,
          const image_type& image,
          const streamable_type& streamable)
  : ::xml_schema::type (),
    name_ (name, ::xml_schema::flags (), this),
    mbid_ (mbid, ::xml_schema::flags (), this),
    match_ (match, ::xml_schema::flags (), this),
    url_ (url, ::xml_schema::flags (), this),
    image_small_ (image_small, ::xml_schema::flags (), this),
    image_ (image, ::xml_schema::flags (), this),
    streamable_ (streamable, ::xml_schema::flags (), this)
  {
  }

  artist::
  artist (const artist& x,
          ::xml_schema::flags f,
          ::xml_schema::type* c)
  : ::xml_schema::type (x, f, c),
    name_ (x.name_, f, this),
    mbid_ (x.mbid_, f, this),
    match_ (x.match_, f, this),
    url_ (x.url_, f, this),
    image_small_ (x.image_small_, f, this),
    image_ (x.image_, f, this),
    streamable_ (x.streamable_, f, this)
  {
  }

  artist::
  artist (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::type* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    name_ (f, this),
    mbid_ (f, this),
    match_ (f, this),
    url_ (f, this),
    image_small_ (f, this),
    image_ (f, this),
    streamable_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void artist::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // name
      //
      if (n.name () == "name" && n.namespace_ () == "LastFM")
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        if (!name_.present ())
        {
          this->name (r);
          continue;
        }
      }

      // mbid
      //
      if (n.name () == "mbid" && n.namespace_ () == "LastFM")
      {
        ::std::auto_ptr< mbid_type > r (
          mbid_traits::create (i, f, this));

        if (!mbid_.present ())
        {
          this->mbid (r);
          continue;
        }
      }

      // match
      //
      if (n.name () == "match" && n.namespace_ () == "LastFM")
      {
        if (!match_.present ())
        {
          this->match (match_traits::create (i, f, this));
          continue;
        }
      }

      // url
      //
      if (n.name () == "url" && n.namespace_ () == "LastFM")
      {
        ::std::auto_ptr< url_type > r (
          url_traits::create (i, f, this));

        if (!url_.present ())
        {
          this->url (r);
          continue;
        }
      }

      // image_small
      //
      if (n.name () == "image_small" && n.namespace_ () == "LastFM")
      {
        ::std::auto_ptr< image_small_type > r (
          image_small_traits::create (i, f, this));

        if (!image_small_.present ())
        {
          this->image_small (r);
          continue;
        }
      }

      // image
      //
      if (n.name () == "image" && n.namespace_ () == "LastFM")
      {
        ::std::auto_ptr< image_type > r (
          image_traits::create (i, f, this));

        if (!image_.present ())
        {
          this->image (r);
          continue;
        }
      }

      // streamable
      //
      if (n.name () == "streamable" && n.namespace_ () == "LastFM")
      {
        if (!streamable_.present ())
        {
          this->streamable (streamable_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "name",
        "LastFM");
    }

    if (!mbid_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "mbid",
        "LastFM");
    }

    if (!match_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "match",
        "LastFM");
    }

    if (!url_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "url",
        "LastFM");
    }

    if (!image_small_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "image_small",
        "LastFM");
    }

    if (!image_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "image",
        "LastFM");
    }

    if (!streamable_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "streamable",
        "LastFM");
    }
  }

  artist* artist::
  _clone (::xml_schema::flags f,
          ::xml_schema::type* c) const
  {
    return new artist (*this, f, c);
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace LastFM
{
  ::std::auto_ptr< ::LastFM::similarartists >
  similarartists_ (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::LastFM::similarartists > r (
      ::LastFM::similarartists_ (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::LastFM::similarartists >
  similarartists_ (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::LastFM::similarartists > r (
      ::LastFM::similarartists_ (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::LastFM::similarartists >
  similarartists_ (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::LastFM::similarartists > r (
      ::LastFM::similarartists_ (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::LastFM::similarartists >
  similarartists_ (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::LastFM::similarartists_ (wrap, f, p);
  }

  ::std::auto_ptr< ::LastFM::similarartists >
  similarartists_ (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::LastFM::similarartists_ (wrap, h, f, p);
  }

  ::std::auto_ptr< ::LastFM::similarartists >
  similarartists_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::LastFM::similarartists_ (wrap, h, f, p);
  }

  ::std::auto_ptr< ::LastFM::similarartists >
  similarartists_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::LastFM::similarartists_ (wrap, f, p);
  }

  ::std::auto_ptr< ::LastFM::similarartists >
  similarartists_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::LastFM::similarartists_ (wrap, h, f, p);
  }

  ::std::auto_ptr< ::LastFM::similarartists >
  similarartists_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    ::xercesc::Wrapper4InputSource wrap (&isrc, false);
    return ::LastFM::similarartists_ (wrap, h, f, p);
  }

  ::std::auto_ptr< ::LastFM::similarartists >
  similarartists_ (const ::xercesc::DOMInputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::LastFM::similarartists > r (
      ::LastFM::similarartists_ (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::LastFM::similarartists >
  similarartists_ (const ::xercesc::DOMInputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::LastFM::similarartists > r (
      ::LastFM::similarartists_ (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::LastFM::similarartists >
  similarartists_ (const ::xercesc::DOMInputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d)
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::LastFM::similarartists > r (
      ::LastFM::similarartists_ (
        d.get (), f | ::xml_schema::flags::own_dom, p));

    if (f & ::xml_schema::flags::keep_dom)
      d.release ();

    return r;
  }

  ::std::auto_ptr< ::LastFM::similarartists >
  similarartists_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::LastFM::similarartists > r (
        ::LastFM::similarartists_ (
          c.get (), f | ::xml_schema::flags::own_dom, p));

      c.release ();
      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "similarartists" &&
        n.namespace_ () == "LastFM")
    {
      ::std::auto_ptr< ::LastFM::similarartists > r (
        ::xsd::cxx::tree::traits< ::LastFM::similarartists, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "similarartists",
      "LastFM");
  }

  ::std::auto_ptr< ::LastFM::similarartists >
  similarartists_ (::xercesc::DOMDocument* d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    const ::xercesc::DOMElement& e (
      c.get ()
      ? *c->getDocumentElement ()
      : *d->getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "similarartists" &&
        n.namespace_ () == "LastFM")
    {
      ::std::auto_ptr< ::LastFM::similarartists > r (
        ::xsd::cxx::tree::traits< ::LastFM::similarartists, char >::create (
          e, f, 0));
      c.release ();
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "similarartists",
      "LastFM");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

