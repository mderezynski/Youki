// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XSD_PROFILE_HXX
#define XSD_PROFILE_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/tree/parsing.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type<type> simple_type;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef integer non_positive_integer;
  typedef integer non_negative_integer;
  typedef integer positive_integer;
  typedef integer negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken> nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::day< char, simple_type > day;
  typedef ::xsd::cxx::tree::month< char, simple_type > month;
  typedef ::xsd::cxx::tree::month_day< char, simple_type > month_day;
  typedef ::xsd::cxx::tree::year< char, simple_type > year;
  typedef ::xsd::cxx::tree::year_month< char, simple_type > year_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // DOM user data key for back pointers to tree nodes.
  //
#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA

  const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;

#endif

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;
}

// Forward declarations.
//
namespace LastFM
{
  class profile;
  class registered;
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace LastFM
{
  class profile: public ::xml_schema::type
  {
    public:
    // url
    // 
    typedef ::xml_schema::string url_type;
    typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

    const url_type&
    url () const;

    url_type&
    url ();

    void
    url (const url_type& x);

    void
    url (::std::auto_ptr< url_type > p);

    // realname
    // 
    typedef ::xml_schema::string realname_type;
    typedef ::xsd::cxx::tree::optional< realname_type > realname_optional;
    typedef ::xsd::cxx::tree::traits< realname_type, char > realname_traits;

    const realname_optional&
    realname () const;

    realname_optional&
    realname ();

    void
    realname (const realname_type& x);

    void
    realname (const realname_optional& x);

    void
    realname (::std::auto_ptr< realname_type > p);

    // mbox_sha1sum
    // 
    typedef ::xml_schema::string mbox_sha1sum_type;
    typedef ::xsd::cxx::tree::traits< mbox_sha1sum_type, char > mbox_sha1sum_traits;

    const mbox_sha1sum_type&
    mbox_sha1sum () const;

    mbox_sha1sum_type&
    mbox_sha1sum ();

    void
    mbox_sha1sum (const mbox_sha1sum_type& x);

    void
    mbox_sha1sum (::std::auto_ptr< mbox_sha1sum_type > p);

    // registered
    // 
    typedef ::LastFM::registered registered_type;
    typedef ::xsd::cxx::tree::traits< registered_type, char > registered_traits;

    const registered_type&
    registered () const;

    registered_type&
    registered ();

    void
    registered (const registered_type& x);

    void
    registered (::std::auto_ptr< registered_type > p);

    // age
    // 
    typedef ::xml_schema::integer age_type;
    typedef ::xsd::cxx::tree::optional< age_type > age_optional;
    typedef ::xsd::cxx::tree::traits< age_type, char > age_traits;

    const age_optional&
    age () const;

    age_optional&
    age ();

    void
    age (const age_type& x);

    void
    age (const age_optional& x);

    // gender
    // 
    typedef ::xml_schema::string gender_type;
    typedef ::xsd::cxx::tree::optional< gender_type > gender_optional;
    typedef ::xsd::cxx::tree::traits< gender_type, char > gender_traits;

    const gender_optional&
    gender () const;

    gender_optional&
    gender ();

    void
    gender (const gender_type& x);

    void
    gender (const gender_optional& x);

    void
    gender (::std::auto_ptr< gender_type > p);

    // country
    // 
    typedef ::xml_schema::string country_type;
    typedef ::xsd::cxx::tree::optional< country_type > country_optional;
    typedef ::xsd::cxx::tree::traits< country_type, char > country_traits;

    const country_optional&
    country () const;

    country_optional&
    country ();

    void
    country (const country_type& x);

    void
    country (const country_optional& x);

    void
    country (::std::auto_ptr< country_type > p);

    // playcount
    // 
    typedef ::xml_schema::integer playcount_type;
    typedef ::xsd::cxx::tree::optional< playcount_type > playcount_optional;
    typedef ::xsd::cxx::tree::traits< playcount_type, char > playcount_traits;

    const playcount_optional&
    playcount () const;

    playcount_optional&
    playcount ();

    void
    playcount (const playcount_type& x);

    void
    playcount (const playcount_optional& x);

    // avatar
    // 
    typedef ::xml_schema::string avatar_type;
    typedef ::xsd::cxx::tree::optional< avatar_type > avatar_optional;
    typedef ::xsd::cxx::tree::traits< avatar_type, char > avatar_traits;

    const avatar_optional&
    avatar () const;

    avatar_optional&
    avatar ();

    void
    avatar (const avatar_type& x);

    void
    avatar (const avatar_optional& x);

    void
    avatar (::std::auto_ptr< avatar_type > p);

    // icon
    // 
    typedef ::xml_schema::string icon_type;
    typedef ::xsd::cxx::tree::optional< icon_type > icon_optional;
    typedef ::xsd::cxx::tree::traits< icon_type, char > icon_traits;

    const icon_optional&
    icon () const;

    icon_optional&
    icon ();

    void
    icon (const icon_type& x);

    void
    icon (const icon_optional& x);

    void
    icon (::std::auto_ptr< icon_type > p);

    // id
    // 
    typedef ::xml_schema::integer id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    // cluster
    // 
    typedef ::xml_schema::integer cluster_type;
    typedef ::xsd::cxx::tree::optional< cluster_type > cluster_optional;
    typedef ::xsd::cxx::tree::traits< cluster_type, char > cluster_traits;

    const cluster_optional&
    cluster () const;

    cluster_optional&
    cluster ();

    void
    cluster (const cluster_type& x);

    void
    cluster (const cluster_optional& x);

    // username
    // 
    typedef ::xml_schema::string username_type;
    typedef ::xsd::cxx::tree::optional< username_type > username_optional;
    typedef ::xsd::cxx::tree::traits< username_type, char > username_traits;

    const username_optional&
    username () const;

    username_optional&
    username ();

    void
    username (const username_type& x);

    void
    username (const username_optional& x);

    void
    username (::std::auto_ptr< username_type > p);

    // Constructors.
    //
    profile (const url_type&,
             const mbox_sha1sum_type&,
             const registered_type&);

    profile (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::type* c = 0);

    profile (const profile& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::type* c = 0);

    virtual profile*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0) const;

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    private:
    ::xsd::cxx::tree::one< url_type > url_;
    realname_optional realname_;
    ::xsd::cxx::tree::one< mbox_sha1sum_type > mbox_sha1sum_;
    ::xsd::cxx::tree::one< registered_type > registered_;
    age_optional age_;
    gender_optional gender_;
    country_optional country_;
    playcount_optional playcount_;
    avatar_optional avatar_;
    icon_optional icon_;
    id_optional id_;
    cluster_optional cluster_;
    username_optional username_;
  };

  class registered: public ::xml_schema::type
  {
    public:
    // unixtime
    // 
    typedef ::xml_schema::integer unixtime_type;
    typedef ::xsd::cxx::tree::optional< unixtime_type > unixtime_optional;
    typedef ::xsd::cxx::tree::traits< unixtime_type, char > unixtime_traits;

    const unixtime_optional&
    unixtime () const;

    unixtime_optional&
    unixtime ();

    void
    unixtime (const unixtime_type& x);

    void
    unixtime (const unixtime_optional& x);

    // Constructors.
    //
    registered ();

    registered (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0);

    registered (const registered& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0);

    virtual registered*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0) const;

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    private:
    unixtime_optional unixtime_;
  };
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace LastFM
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::LastFM::profile >
  profile_ (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::LastFM::profile >
  profile_ (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::LastFM::profile >
  profile_ (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::LastFM::profile >
  profile_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::LastFM::profile >
  profile_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::LastFM::profile >
  profile_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::LastFM::profile >
  profile_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::LastFM::profile >
  profile_ (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::LastFM::profile >
  profile_ (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMInputSource.
  //

  ::std::auto_ptr< ::LastFM::profile >
  profile_ (const ::xercesc::DOMInputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::LastFM::profile >
  profile_ (const ::xercesc::DOMInputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::LastFM::profile >
  profile_ (const ::xercesc::DOMInputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::LastFM::profile >
  profile_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::LastFM::profile >
  profile_ (::xercesc::DOMDocument* d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XSD_PROFILE_HXX
