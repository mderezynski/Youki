// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XSD_TAG_TOPALBUMS_HXX
#define XSD_TAG_TOPALBUMS_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/tree/parsing.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type<type> simple_type;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef integer non_positive_integer;
  typedef integer non_negative_integer;
  typedef integer positive_integer;
  typedef integer negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken> nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::day< char, simple_type > day;
  typedef ::xsd::cxx::tree::month< char, simple_type > month;
  typedef ::xsd::cxx::tree::month_day< char, simple_type > month_day;
  typedef ::xsd::cxx::tree::year< char, simple_type > year;
  typedef ::xsd::cxx::tree::year_month< char, simple_type > year_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // DOM user data key for back pointers to tree nodes.
  //
#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA

  const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;

#endif

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;
}

// Forward declarations.
//
class tag;
class album;
class artist;
class coverart;

#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class tag: public ::xml_schema::type
{
  public:
  // album
  // 
  typedef ::album album_type;
  typedef ::xsd::cxx::tree::sequence< album_type > album_sequence;
  typedef album_sequence::iterator album_iterator;
  typedef album_sequence::const_iterator album_const_iterator;
  typedef ::xsd::cxx::tree::traits< album_type, char > album_traits;

  const album_sequence&
  album () const;

  album_sequence&
  album ();

  void
  album (const album_sequence& s);

  // count
  // 
  typedef ::xml_schema::integer count_type;
  typedef ::xsd::cxx::tree::traits< count_type, char > count_traits;

  const count_type&
  count () const;

  count_type&
  count ();

  void
  count (const count_type& x);

  // tag
  // 
  typedef ::xml_schema::string tag1_type;
  typedef ::xsd::cxx::tree::traits< tag1_type, char > tag1_traits;

  const tag1_type&
  tag1 () const;

  tag1_type&
  tag1 ();

  void
  tag1 (const tag1_type& x);

  void
  tag1 (::std::auto_ptr< tag1_type > p);

  // Constructors.
  //
  tag (const count_type&,
       const tag1_type&);

  tag (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::type* c = 0);

  tag (const tag& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::type* c = 0);

  virtual tag*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  private:
  album_sequence album_;
  ::xsd::cxx::tree::one< count_type > count_;
  ::xsd::cxx::tree::one< tag1_type > tag1_;
};

class album: public ::xml_schema::type
{
  public:
  // artist
  // 
  typedef ::artist artist_type;
  typedef ::xsd::cxx::tree::traits< artist_type, char > artist_traits;

  const artist_type&
  artist () const;

  artist_type&
  artist ();

  void
  artist (const artist_type& x);

  void
  artist (::std::auto_ptr< artist_type > p);

  // url
  // 
  typedef ::xml_schema::uri url_type;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_type&
  url () const;

  url_type&
  url ();

  void
  url (const url_type& x);

  void
  url (::std::auto_ptr< url_type > p);

  // coverart
  // 
  typedef ::coverart coverart_type;
  typedef ::xsd::cxx::tree::traits< coverart_type, char > coverart_traits;

  const coverart_type&
  coverart () const;

  coverart_type&
  coverart ();

  void
  coverart (const coverart_type& x);

  void
  coverart (::std::auto_ptr< coverart_type > p);

  // count
  // 
  typedef ::xml_schema::integer count_type;
  typedef ::xsd::cxx::tree::traits< count_type, char > count_traits;

  const count_type&
  count () const;

  count_type&
  count ();

  void
  count (const count_type& x);

  // name
  // 
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // streamable
  // 
  typedef ::xml_schema::string streamable_type;
  typedef ::xsd::cxx::tree::traits< streamable_type, char > streamable_traits;

  const streamable_type&
  streamable () const;

  streamable_type&
  streamable ();

  void
  streamable (const streamable_type& x);

  void
  streamable (::std::auto_ptr< streamable_type > p);

  // Constructors.
  //
  album (const artist_type&,
         const url_type&,
         const coverart_type&,
         const count_type&,
         const name_type&,
         const streamable_type&);

  album (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::type* c = 0);

  album (const album& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::type* c = 0);

  virtual album*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  private:
  ::xsd::cxx::tree::one< artist_type > artist_;
  ::xsd::cxx::tree::one< url_type > url_;
  ::xsd::cxx::tree::one< coverart_type > coverart_;
  ::xsd::cxx::tree::one< count_type > count_;
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< streamable_type > streamable_;
};

class artist: public ::xml_schema::type
{
  public:
  // mbid
  // 
  typedef ::xml_schema::string mbid_type;
  typedef ::xsd::cxx::tree::traits< mbid_type, char > mbid_traits;

  const mbid_type&
  mbid () const;

  mbid_type&
  mbid ();

  void
  mbid (const mbid_type& x);

  void
  mbid (::std::auto_ptr< mbid_type > p);

  // url
  // 
  typedef ::xml_schema::uri url_type;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_type&
  url () const;

  url_type&
  url ();

  void
  url (const url_type& x);

  void
  url (::std::auto_ptr< url_type > p);

  // name
  // 
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // Constructors.
  //
  artist (const mbid_type&,
          const url_type&,
          const name_type&);

  artist (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0);

  artist (const artist& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0);

  virtual artist*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  private:
  ::xsd::cxx::tree::one< mbid_type > mbid_;
  ::xsd::cxx::tree::one< url_type > url_;
  ::xsd::cxx::tree::one< name_type > name_;
};

class coverart: public ::xml_schema::type
{
  public:
  // small
  // 
  typedef ::xml_schema::uri small_type;
  typedef ::xsd::cxx::tree::traits< small_type, char > small_traits;

  const small_type&
  small () const;

  small_type&
  small ();

  void
  small (const small_type& x);

  void
  small (::std::auto_ptr< small_type > p);

  // medium
  // 
  typedef ::xml_schema::uri medium_type;
  typedef ::xsd::cxx::tree::traits< medium_type, char > medium_traits;

  const medium_type&
  medium () const;

  medium_type&
  medium ();

  void
  medium (const medium_type& x);

  void
  medium (::std::auto_ptr< medium_type > p);

  // large
  // 
  typedef ::xml_schema::uri large_type;
  typedef ::xsd::cxx::tree::traits< large_type, char > large_traits;

  const large_type&
  large () const;

  large_type&
  large ();

  void
  large (const large_type& x);

  void
  large (::std::auto_ptr< large_type > p);

  // Constructors.
  //
  coverart (const small_type&,
            const medium_type&,
            const large_type&);

  coverart (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0);

  coverart (const coverart& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0);

  virtual coverart*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  private:
  ::xsd::cxx::tree::one< small_type > small_;
  ::xsd::cxx::tree::one< medium_type > medium_;
  ::xsd::cxx::tree::one< large_type > large_;
};

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::tag >
tag_ (const ::std::string& uri,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tag >
tag_ (const ::std::string& uri,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tag >
tag_ (const ::std::string& uri,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::tag >
tag_ (::std::istream& is,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tag >
tag_ (::std::istream& is,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tag >
tag_ (::std::istream& is,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tag >
tag_ (::std::istream& is,
      const ::std::string& id,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tag >
tag_ (::std::istream& is,
      const ::std::string& id,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tag >
tag_ (::std::istream& is,
      const ::std::string& id,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMInputSource.
//

::std::auto_ptr< ::tag >
tag_ (const ::xercesc::DOMInputSource& is,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tag >
tag_ (const ::xercesc::DOMInputSource& is,
      ::xml_schema::error_handler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tag >
tag_ (const ::xercesc::DOMInputSource& is,
      ::xercesc::DOMErrorHandler& eh,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::tag >
tag_ (const ::xercesc::DOMDocument& d,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tag >
tag_ (::xercesc::DOMDocument* d,
      ::xml_schema::flags f = 0,
      const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XSD_TAG_TOPALBUMS_HXX
