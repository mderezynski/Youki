// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "xsd-tag-topalbums.hxx"

// tag
// 

const tag::album_sequence& tag::
album () const
{
  return this->album_;
}

tag::album_sequence& tag::
album ()
{
  return this->album_;
}

void tag::
album (const album_sequence& album)
{
  this->album_ = album;
}

const tag::count_type& tag::
count () const
{
  return this->count_.get ();
}

tag::count_type& tag::
count ()
{
  return this->count_.get ();
}

void tag::
count (const count_type& count)
{
  this->count_.set (count);
}

const tag::tag1_type& tag::
tag1 () const
{
  return this->tag1_.get ();
}

tag::tag1_type& tag::
tag1 ()
{
  return this->tag1_.get ();
}

void tag::
tag1 (const tag1_type& tag1)
{
  this->tag1_.set (tag1);
}

void tag::
tag1 (::std::auto_ptr< tag1_type > tag1)
{
  this->tag1_.set (tag1);
}


// album
// 

const album::artist_type& album::
artist () const
{
  return this->artist_.get ();
}

album::artist_type& album::
artist ()
{
  return this->artist_.get ();
}

void album::
artist (const artist_type& artist)
{
  this->artist_.set (artist);
}

void album::
artist (::std::auto_ptr< artist_type > artist)
{
  this->artist_.set (artist);
}

const album::url_type& album::
url () const
{
  return this->url_.get ();
}

album::url_type& album::
url ()
{
  return this->url_.get ();
}

void album::
url (const url_type& url)
{
  this->url_.set (url);
}

void album::
url (::std::auto_ptr< url_type > url)
{
  this->url_.set (url);
}

const album::coverart_type& album::
coverart () const
{
  return this->coverart_.get ();
}

album::coverart_type& album::
coverart ()
{
  return this->coverart_.get ();
}

void album::
coverart (const coverart_type& coverart)
{
  this->coverart_.set (coverart);
}

void album::
coverart (::std::auto_ptr< coverart_type > coverart)
{
  this->coverart_.set (coverart);
}

const album::count_type& album::
count () const
{
  return this->count_.get ();
}

album::count_type& album::
count ()
{
  return this->count_.get ();
}

void album::
count (const count_type& count)
{
  this->count_.set (count);
}

const album::name_type& album::
name () const
{
  return this->name_.get ();
}

album::name_type& album::
name ()
{
  return this->name_.get ();
}

void album::
name (const name_type& name)
{
  this->name_.set (name);
}

void album::
name (::std::auto_ptr< name_type > name)
{
  this->name_.set (name);
}

const album::streamable_type& album::
streamable () const
{
  return this->streamable_.get ();
}

album::streamable_type& album::
streamable ()
{
  return this->streamable_.get ();
}

void album::
streamable (const streamable_type& streamable)
{
  this->streamable_.set (streamable);
}

void album::
streamable (::std::auto_ptr< streamable_type > streamable)
{
  this->streamable_.set (streamable);
}


// artist
// 

const artist::mbid_type& artist::
mbid () const
{
  return this->mbid_.get ();
}

artist::mbid_type& artist::
mbid ()
{
  return this->mbid_.get ();
}

void artist::
mbid (const mbid_type& mbid)
{
  this->mbid_.set (mbid);
}

void artist::
mbid (::std::auto_ptr< mbid_type > mbid)
{
  this->mbid_.set (mbid);
}

const artist::url_type& artist::
url () const
{
  return this->url_.get ();
}

artist::url_type& artist::
url ()
{
  return this->url_.get ();
}

void artist::
url (const url_type& url)
{
  this->url_.set (url);
}

void artist::
url (::std::auto_ptr< url_type > url)
{
  this->url_.set (url);
}

const artist::name_type& artist::
name () const
{
  return this->name_.get ();
}

artist::name_type& artist::
name ()
{
  return this->name_.get ();
}

void artist::
name (const name_type& name)
{
  this->name_.set (name);
}

void artist::
name (::std::auto_ptr< name_type > name)
{
  this->name_.set (name);
}


// coverart
// 

const coverart::small_type& coverart::
small () const
{
  return this->small_.get ();
}

coverart::small_type& coverart::
small ()
{
  return this->small_.get ();
}

void coverart::
small (const small_type& small)
{
  this->small_.set (small);
}

void coverart::
small (::std::auto_ptr< small_type > small)
{
  this->small_.set (small);
}

const coverart::medium_type& coverart::
medium () const
{
  return this->medium_.get ();
}

coverart::medium_type& coverart::
medium ()
{
  return this->medium_.get ();
}

void coverart::
medium (const medium_type& medium)
{
  this->medium_.set (medium);
}

void coverart::
medium (::std::auto_ptr< medium_type > medium)
{
  this->medium_.set (medium);
}

const coverart::large_type& coverart::
large () const
{
  return this->large_.get ();
}

coverart::large_type& coverart::
large ()
{
  return this->large_.get ();
}

void coverart::
large (const large_type& large)
{
  this->large_.set (large);
}

void coverart::
large (::std::auto_ptr< large_type > large)
{
  this->large_.set (large);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// tag
//

tag::
tag (const count_type& count,
     const tag1_type& tag1)
: ::xml_schema::type (),
  album_ (::xml_schema::flags (), this),
  count_ (count, ::xml_schema::flags (), this),
  tag1_ (tag1, ::xml_schema::flags (), this)
{
}

tag::
tag (const tag& x,
     ::xml_schema::flags f,
     ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  album_ (x.album_, f, this),
  count_ (x.count_, f, this),
  tag1_ (x.tag1_, f, this)
{
}

tag::
tag (const ::xercesc::DOMElement& e,
     ::xml_schema::flags f,
     ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  album_ (f, this),
  count_ (f, this),
  tag1_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void tag::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // album
    //
    if (n.name () == "album" && n.namespace_ () == "")
    {
      ::std::auto_ptr< album_type > r (
        album_traits::create (i, f, this));

      this->album ().push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "count" && n.namespace_ ().empty ())
    {
      this->count (count_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "tag" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< tag1_type > r (
        tag1_traits::create (i, f, this));

      this->tag1 (r);
      continue;
    }
  }

  if (!count_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "count",
      "");
  }

  if (!tag1_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "tag",
      "");
  }
}

tag* tag::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new tag (*this, f, c);
}

// album
//

album::
album (const artist_type& artist,
       const url_type& url,
       const coverart_type& coverart,
       const count_type& count,
       const name_type& name,
       const streamable_type& streamable)
: ::xml_schema::type (),
  artist_ (artist, ::xml_schema::flags (), this),
  url_ (url, ::xml_schema::flags (), this),
  coverart_ (coverart, ::xml_schema::flags (), this),
  count_ (count, ::xml_schema::flags (), this),
  name_ (name, ::xml_schema::flags (), this),
  streamable_ (streamable, ::xml_schema::flags (), this)
{
}

album::
album (const album& x,
       ::xml_schema::flags f,
       ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  artist_ (x.artist_, f, this),
  url_ (x.url_, f, this),
  coverart_ (x.coverart_, f, this),
  count_ (x.count_, f, this),
  name_ (x.name_, f, this),
  streamable_ (x.streamable_, f, this)
{
}

album::
album (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  artist_ (f, this),
  url_ (f, this),
  coverart_ (f, this),
  count_ (f, this),
  name_ (f, this),
  streamable_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void album::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // artist
    //
    if (n.name () == "artist" && n.namespace_ () == "")
    {
      ::std::auto_ptr< artist_type > r (
        artist_traits::create (i, f, this));

      if (!artist_.present ())
      {
        this->artist (r);
        continue;
      }
    }

    // url
    //
    if (n.name () == "url" && n.namespace_ () == "")
    {
      ::std::auto_ptr< url_type > r (
        url_traits::create (i, f, this));

      if (!url_.present ())
      {
        this->url (r);
        continue;
      }
    }

    // coverart
    //
    if (n.name () == "coverart" && n.namespace_ () == "")
    {
      ::std::auto_ptr< coverart_type > r (
        coverart_traits::create (i, f, this));

      if (!coverart_.present ())
      {
        this->coverart (r);
        continue;
      }
    }

    break;
  }

  if (!artist_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "artist",
      "");
  }

  if (!url_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "url",
      "");
  }

  if (!coverart_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "coverart",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "count" && n.namespace_ ().empty ())
    {
      this->count (count_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      this->name (r);
      continue;
    }

    if (n.name () == "streamable" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< streamable_type > r (
        streamable_traits::create (i, f, this));

      this->streamable (r);
      continue;
    }
  }

  if (!count_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "count",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!streamable_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "streamable",
      "");
  }
}

album* album::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new album (*this, f, c);
}

// artist
//

artist::
artist (const mbid_type& mbid,
        const url_type& url,
        const name_type& name)
: ::xml_schema::type (),
  mbid_ (mbid, ::xml_schema::flags (), this),
  url_ (url, ::xml_schema::flags (), this),
  name_ (name, ::xml_schema::flags (), this)
{
}

artist::
artist (const artist& x,
        ::xml_schema::flags f,
        ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  mbid_ (x.mbid_, f, this),
  url_ (x.url_, f, this),
  name_ (x.name_, f, this)
{
}

artist::
artist (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  mbid_ (f, this),
  url_ (f, this),
  name_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void artist::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // mbid
    //
    if (n.name () == "mbid" && n.namespace_ () == "")
    {
      ::std::auto_ptr< mbid_type > r (
        mbid_traits::create (i, f, this));

      if (!mbid_.present ())
      {
        this->mbid (r);
        continue;
      }
    }

    // url
    //
    if (n.name () == "url" && n.namespace_ () == "")
    {
      ::std::auto_ptr< url_type > r (
        url_traits::create (i, f, this));

      if (!url_.present ())
      {
        this->url (r);
        continue;
      }
    }

    break;
  }

  if (!mbid_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mbid",
      "");
  }

  if (!url_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "url",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      this->name (r);
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }
}

artist* artist::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new artist (*this, f, c);
}

// coverart
//

coverart::
coverart (const small_type& small,
          const medium_type& medium,
          const large_type& large)
: ::xml_schema::type (),
  small_ (small, ::xml_schema::flags (), this),
  medium_ (medium, ::xml_schema::flags (), this),
  large_ (large, ::xml_schema::flags (), this)
{
}

coverart::
coverart (const coverart& x,
          ::xml_schema::flags f,
          ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  small_ (x.small_, f, this),
  medium_ (x.medium_, f, this),
  large_ (x.large_, f, this)
{
}

coverart::
coverart (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  small_ (f, this),
  medium_ (f, this),
  large_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void coverart::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // small
    //
    if (n.name () == "small" && n.namespace_ () == "")
    {
      ::std::auto_ptr< small_type > r (
        small_traits::create (i, f, this));

      if (!small_.present ())
      {
        this->small (r);
        continue;
      }
    }

    // medium
    //
    if (n.name () == "medium" && n.namespace_ () == "")
    {
      ::std::auto_ptr< medium_type > r (
        medium_traits::create (i, f, this));

      if (!medium_.present ())
      {
        this->medium (r);
        continue;
      }
    }

    // large
    //
    if (n.name () == "large" && n.namespace_ () == "")
    {
      ::std::auto_ptr< large_type > r (
        large_traits::create (i, f, this));

      if (!large_.present ())
      {
        this->large (r);
        continue;
      }
    }

    break;
  }

  if (!small_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "small",
      "");
  }

  if (!medium_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "medium",
      "");
  }

  if (!large_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "large",
      "");
  }
}

coverart* coverart::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new coverart (*this, f, c);
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::tag >
tag_ (const ::std::string& u,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::tag > r (
    ::tag_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::tag >
tag_ (const ::std::string& u,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::tag > r (
    ::tag_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::tag >
tag_ (const ::std::string& u,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::tag > r (
    ::tag_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::tag >
tag_ (::std::istream& is,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::tag_ (wrap, f, p);
}

::std::auto_ptr< ::tag >
tag_ (::std::istream& is,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::tag_ (wrap, h, f, p);
}

::std::auto_ptr< ::tag >
tag_ (::std::istream& is,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::tag_ (wrap, h, f, p);
}

::std::auto_ptr< ::tag >
tag_ (::std::istream& is,
      const ::std::string& sid,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::tag_ (wrap, f, p);
}

::std::auto_ptr< ::tag >
tag_ (::std::istream& is,
      const ::std::string& sid,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::tag_ (wrap, h, f, p);
}

::std::auto_ptr< ::tag >
tag_ (::std::istream& is,
      const ::std::string& sid,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::tag_ (wrap, h, f, p);
}

::std::auto_ptr< ::tag >
tag_ (const ::xercesc::DOMInputSource& i,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::tag > r (
    ::tag_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::tag >
tag_ (const ::xercesc::DOMInputSource& i,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::tag > r (
    ::tag_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::tag >
tag_ (const ::xercesc::DOMInputSource& i,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::tag > r (
    ::tag_ (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::tag >
tag_ (const ::xercesc::DOMDocument& d,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::tag > r (
      ::tag_ (
        c.get (), f | ::xml_schema::flags::own_dom, p));

    c.release ();
    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "tag" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::tag > r (
      ::xsd::cxx::tree::traits< ::tag, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "tag",
    "");
}

::std::auto_ptr< ::tag >
tag_ (::xercesc::DOMDocument* d,
      ::xml_schema::flags f,
      const ::xml_schema::properties&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  const ::xercesc::DOMElement& e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d->getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "tag" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::tag > r (
      ::xsd::cxx::tree::traits< ::tag, char >::create (
        e, f, 0));
    c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "tag",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

