// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef RSS_2_0_HXX
#define RSS_2_0_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/tree/parsing.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type<type> simple_type;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef integer non_positive_integer;
  typedef integer non_negative_integer;
  typedef integer positive_integer;
  typedef integer negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken> nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::day< char, simple_type > day;
  typedef ::xsd::cxx::tree::month< char, simple_type > month;
  typedef ::xsd::cxx::tree::month_day< char, simple_type > month_day;
  typedef ::xsd::cxx::tree::year< char, simple_type > year;
  typedef ::xsd::cxx::tree::year_month< char, simple_type > year_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // DOM user data key for back pointers to tree nodes.
  //
#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA

  const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;

#endif

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;
}

// Forward declarations.
//
class tRss;
class tRssItem;
class tRssChannel;
class tSkipHour;
class tSkipHoursList;
class tSkipDay;
class tSkipDaysList;
class tCategory;
class tImage;
class tImageHeight;
class tImageWidth;
class tCloud;
class tCloudProtocol;
class tTextInput;
class tEmailAddress;
class tRfc822FormatDate;
class tSource;
class tEnclosure;
class tGuid;

#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class tRss: public ::xml_schema::type
{
  public:
  // channel
  // 
  typedef ::tRssChannel channel_type;
  typedef ::xsd::cxx::tree::traits< channel_type, char > channel_traits;

  const channel_type&
  channel () const;

  channel_type&
  channel ();

  void
  channel (const channel_type& x);

  void
  channel (::std::auto_ptr< channel_type > p);

  // version
  // 
  typedef ::xml_schema::decimal version_type;
  typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

  const version_type&
  version () const;

  version_type&
  version ();

  void
  version (const version_type& x);

  static const version_type&
  version_default_value ();

  // Constructors.
  //
  tRss (const channel_type&,
        const version_type&);

  tRss (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::type* c = 0);

  tRss (const tRss& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::type* c = 0);

  virtual tRss*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  private:
  ::xsd::cxx::tree::one< channel_type > channel_;
  ::xsd::cxx::tree::one< version_type > version_;
  static const version_type version_default_value_;
};

class tRssItem: public ::xml_schema::type
{
  public:
  // title
  // 
  typedef ::xml_schema::string title_type;
  typedef ::xsd::cxx::tree::sequence< title_type > title_sequence;
  typedef title_sequence::iterator title_iterator;
  typedef title_sequence::const_iterator title_const_iterator;
  typedef ::xsd::cxx::tree::traits< title_type, char > title_traits;

  const title_sequence&
  title () const;

  title_sequence&
  title ();

  void
  title (const title_sequence& s);

  // description
  // 
  typedef ::xml_schema::string description_type;
  typedef ::xsd::cxx::tree::sequence< description_type > description_sequence;
  typedef description_sequence::iterator description_iterator;
  typedef description_sequence::const_iterator description_const_iterator;
  typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

  const description_sequence&
  description () const;

  description_sequence&
  description ();

  void
  description (const description_sequence& s);

  // link
  // 
  typedef ::xml_schema::uri link_type;
  typedef ::xsd::cxx::tree::sequence< link_type > link_sequence;
  typedef link_sequence::iterator link_iterator;
  typedef link_sequence::const_iterator link_const_iterator;
  typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

  const link_sequence&
  link () const;

  link_sequence&
  link ();

  void
  link (const link_sequence& s);

  // author
  // 
  typedef ::tEmailAddress author_type;
  typedef ::xsd::cxx::tree::sequence< author_type > author_sequence;
  typedef author_sequence::iterator author_iterator;
  typedef author_sequence::const_iterator author_const_iterator;
  typedef ::xsd::cxx::tree::traits< author_type, char > author_traits;

  const author_sequence&
  author () const;

  author_sequence&
  author ();

  void
  author (const author_sequence& s);

  // category
  // 
  typedef ::tCategory category_type;
  typedef ::xsd::cxx::tree::sequence< category_type > category_sequence;
  typedef category_sequence::iterator category_iterator;
  typedef category_sequence::const_iterator category_const_iterator;
  typedef ::xsd::cxx::tree::traits< category_type, char > category_traits;

  const category_sequence&
  category () const;

  category_sequence&
  category ();

  void
  category (const category_sequence& s);

  // comments
  // 
  typedef ::xml_schema::uri comments_type;
  typedef ::xsd::cxx::tree::sequence< comments_type > comments_sequence;
  typedef comments_sequence::iterator comments_iterator;
  typedef comments_sequence::const_iterator comments_const_iterator;
  typedef ::xsd::cxx::tree::traits< comments_type, char > comments_traits;

  const comments_sequence&
  comments () const;

  comments_sequence&
  comments ();

  void
  comments (const comments_sequence& s);

  // enclosure
  // 
  typedef ::tEnclosure enclosure_type;
  typedef ::xsd::cxx::tree::sequence< enclosure_type > enclosure_sequence;
  typedef enclosure_sequence::iterator enclosure_iterator;
  typedef enclosure_sequence::const_iterator enclosure_const_iterator;
  typedef ::xsd::cxx::tree::traits< enclosure_type, char > enclosure_traits;

  const enclosure_sequence&
  enclosure () const;

  enclosure_sequence&
  enclosure ();

  void
  enclosure (const enclosure_sequence& s);

  // guid
  // 
  typedef ::tGuid guid_type;
  typedef ::xsd::cxx::tree::sequence< guid_type > guid_sequence;
  typedef guid_sequence::iterator guid_iterator;
  typedef guid_sequence::const_iterator guid_const_iterator;
  typedef ::xsd::cxx::tree::traits< guid_type, char > guid_traits;

  const guid_sequence&
  guid () const;

  guid_sequence&
  guid ();

  void
  guid (const guid_sequence& s);

  // pubDate
  // 
  typedef ::tRfc822FormatDate pubDate_type;
  typedef ::xsd::cxx::tree::sequence< pubDate_type > pubDate_sequence;
  typedef pubDate_sequence::iterator pubDate_iterator;
  typedef pubDate_sequence::const_iterator pubDate_const_iterator;
  typedef ::xsd::cxx::tree::traits< pubDate_type, char > pubDate_traits;

  const pubDate_sequence&
  pubDate () const;

  pubDate_sequence&
  pubDate ();

  void
  pubDate (const pubDate_sequence& s);

  // source
  // 
  typedef ::tSource source_type;
  typedef ::xsd::cxx::tree::sequence< source_type > source_sequence;
  typedef source_sequence::iterator source_iterator;
  typedef source_sequence::const_iterator source_const_iterator;
  typedef ::xsd::cxx::tree::traits< source_type, char > source_traits;

  const source_sequence&
  source () const;

  source_sequence&
  source ();

  void
  source (const source_sequence& s);

  // Constructors.
  //
  tRssItem ();

  tRssItem (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0);

  tRssItem (const tRssItem& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0);

  virtual tRssItem*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  private:
  title_sequence title_;
  description_sequence description_;
  link_sequence link_;
  author_sequence author_;
  category_sequence category_;
  comments_sequence comments_;
  enclosure_sequence enclosure_;
  guid_sequence guid_;
  pubDate_sequence pubDate_;
  source_sequence source_;
};

class tRssChannel: public ::xml_schema::type
{
  public:
  // title
  // 
  typedef ::xml_schema::string title_type;
  typedef ::xsd::cxx::tree::sequence< title_type > title_sequence;
  typedef title_sequence::iterator title_iterator;
  typedef title_sequence::const_iterator title_const_iterator;
  typedef ::xsd::cxx::tree::traits< title_type, char > title_traits;

  const title_sequence&
  title () const;

  title_sequence&
  title ();

  void
  title (const title_sequence& s);

  // link
  // 
  typedef ::xml_schema::uri link_type;
  typedef ::xsd::cxx::tree::sequence< link_type > link_sequence;
  typedef link_sequence::iterator link_iterator;
  typedef link_sequence::const_iterator link_const_iterator;
  typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

  const link_sequence&
  link () const;

  link_sequence&
  link ();

  void
  link (const link_sequence& s);

  // description
  // 
  typedef ::xml_schema::string description_type;
  typedef ::xsd::cxx::tree::sequence< description_type > description_sequence;
  typedef description_sequence::iterator description_iterator;
  typedef description_sequence::const_iterator description_const_iterator;
  typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

  const description_sequence&
  description () const;

  description_sequence&
  description ();

  void
  description (const description_sequence& s);

  // language
  // 
  typedef ::xml_schema::language language_type;
  typedef ::xsd::cxx::tree::sequence< language_type > language_sequence;
  typedef language_sequence::iterator language_iterator;
  typedef language_sequence::const_iterator language_const_iterator;
  typedef ::xsd::cxx::tree::traits< language_type, char > language_traits;

  const language_sequence&
  language () const;

  language_sequence&
  language ();

  void
  language (const language_sequence& s);

  // copyright
  // 
  typedef ::xml_schema::string copyright_type;
  typedef ::xsd::cxx::tree::sequence< copyright_type > copyright_sequence;
  typedef copyright_sequence::iterator copyright_iterator;
  typedef copyright_sequence::const_iterator copyright_const_iterator;
  typedef ::xsd::cxx::tree::traits< copyright_type, char > copyright_traits;

  const copyright_sequence&
  copyright () const;

  copyright_sequence&
  copyright ();

  void
  copyright (const copyright_sequence& s);

  // managingEditor
  // 
  typedef ::tEmailAddress managingEditor_type;
  typedef ::xsd::cxx::tree::sequence< managingEditor_type > managingEditor_sequence;
  typedef managingEditor_sequence::iterator managingEditor_iterator;
  typedef managingEditor_sequence::const_iterator managingEditor_const_iterator;
  typedef ::xsd::cxx::tree::traits< managingEditor_type, char > managingEditor_traits;

  const managingEditor_sequence&
  managingEditor () const;

  managingEditor_sequence&
  managingEditor ();

  void
  managingEditor (const managingEditor_sequence& s);

  // webMaster
  // 
  typedef ::tEmailAddress webMaster_type;
  typedef ::xsd::cxx::tree::sequence< webMaster_type > webMaster_sequence;
  typedef webMaster_sequence::iterator webMaster_iterator;
  typedef webMaster_sequence::const_iterator webMaster_const_iterator;
  typedef ::xsd::cxx::tree::traits< webMaster_type, char > webMaster_traits;

  const webMaster_sequence&
  webMaster () const;

  webMaster_sequence&
  webMaster ();

  void
  webMaster (const webMaster_sequence& s);

  // pubDate
  // 
  typedef ::tRfc822FormatDate pubDate_type;
  typedef ::xsd::cxx::tree::sequence< pubDate_type > pubDate_sequence;
  typedef pubDate_sequence::iterator pubDate_iterator;
  typedef pubDate_sequence::const_iterator pubDate_const_iterator;
  typedef ::xsd::cxx::tree::traits< pubDate_type, char > pubDate_traits;

  const pubDate_sequence&
  pubDate () const;

  pubDate_sequence&
  pubDate ();

  void
  pubDate (const pubDate_sequence& s);

  // lastBuildDate
  // 
  typedef ::tRfc822FormatDate lastBuildDate_type;
  typedef ::xsd::cxx::tree::sequence< lastBuildDate_type > lastBuildDate_sequence;
  typedef lastBuildDate_sequence::iterator lastBuildDate_iterator;
  typedef lastBuildDate_sequence::const_iterator lastBuildDate_const_iterator;
  typedef ::xsd::cxx::tree::traits< lastBuildDate_type, char > lastBuildDate_traits;

  const lastBuildDate_sequence&
  lastBuildDate () const;

  lastBuildDate_sequence&
  lastBuildDate ();

  void
  lastBuildDate (const lastBuildDate_sequence& s);

  // category
  // 
  typedef ::tCategory category_type;
  typedef ::xsd::cxx::tree::sequence< category_type > category_sequence;
  typedef category_sequence::iterator category_iterator;
  typedef category_sequence::const_iterator category_const_iterator;
  typedef ::xsd::cxx::tree::traits< category_type, char > category_traits;

  const category_sequence&
  category () const;

  category_sequence&
  category ();

  void
  category (const category_sequence& s);

  // generator
  // 
  typedef ::xml_schema::string generator_type;
  typedef ::xsd::cxx::tree::sequence< generator_type > generator_sequence;
  typedef generator_sequence::iterator generator_iterator;
  typedef generator_sequence::const_iterator generator_const_iterator;
  typedef ::xsd::cxx::tree::traits< generator_type, char > generator_traits;

  const generator_sequence&
  generator () const;

  generator_sequence&
  generator ();

  void
  generator (const generator_sequence& s);

  // docs
  // 
  typedef ::xml_schema::uri docs_type;
  typedef ::xsd::cxx::tree::sequence< docs_type > docs_sequence;
  typedef docs_sequence::iterator docs_iterator;
  typedef docs_sequence::const_iterator docs_const_iterator;
  typedef ::xsd::cxx::tree::traits< docs_type, char > docs_traits;

  const docs_sequence&
  docs () const;

  docs_sequence&
  docs ();

  void
  docs (const docs_sequence& s);

  // cloud
  // 
  typedef ::tCloud cloud_type;
  typedef ::xsd::cxx::tree::sequence< cloud_type > cloud_sequence;
  typedef cloud_sequence::iterator cloud_iterator;
  typedef cloud_sequence::const_iterator cloud_const_iterator;
  typedef ::xsd::cxx::tree::traits< cloud_type, char > cloud_traits;

  const cloud_sequence&
  cloud () const;

  cloud_sequence&
  cloud ();

  void
  cloud (const cloud_sequence& s);

  // ttl
  // 
  typedef ::xml_schema::non_negative_integer ttl_type;
  typedef ::xsd::cxx::tree::sequence< ttl_type > ttl_sequence;
  typedef ttl_sequence::iterator ttl_iterator;
  typedef ttl_sequence::const_iterator ttl_const_iterator;
  typedef ::xsd::cxx::tree::traits< ttl_type, char > ttl_traits;

  const ttl_sequence&
  ttl () const;

  ttl_sequence&
  ttl ();

  void
  ttl (const ttl_sequence& s);

  // image
  // 
  typedef ::tImage image_type;
  typedef ::xsd::cxx::tree::sequence< image_type > image_sequence;
  typedef image_sequence::iterator image_iterator;
  typedef image_sequence::const_iterator image_const_iterator;
  typedef ::xsd::cxx::tree::traits< image_type, char > image_traits;

  const image_sequence&
  image () const;

  image_sequence&
  image ();

  void
  image (const image_sequence& s);

  // textInput
  // 
  typedef ::tTextInput textInput_type;
  typedef ::xsd::cxx::tree::sequence< textInput_type > textInput_sequence;
  typedef textInput_sequence::iterator textInput_iterator;
  typedef textInput_sequence::const_iterator textInput_const_iterator;
  typedef ::xsd::cxx::tree::traits< textInput_type, char > textInput_traits;

  const textInput_sequence&
  textInput () const;

  textInput_sequence&
  textInput ();

  void
  textInput (const textInput_sequence& s);

  // skipHours
  // 
  typedef ::tSkipHoursList skipHours_type;
  typedef ::xsd::cxx::tree::sequence< skipHours_type > skipHours_sequence;
  typedef skipHours_sequence::iterator skipHours_iterator;
  typedef skipHours_sequence::const_iterator skipHours_const_iterator;
  typedef ::xsd::cxx::tree::traits< skipHours_type, char > skipHours_traits;

  const skipHours_sequence&
  skipHours () const;

  skipHours_sequence&
  skipHours ();

  void
  skipHours (const skipHours_sequence& s);

  // skipDays
  // 
  typedef ::tSkipDaysList skipDays_type;
  typedef ::xsd::cxx::tree::sequence< skipDays_type > skipDays_sequence;
  typedef skipDays_sequence::iterator skipDays_iterator;
  typedef skipDays_sequence::const_iterator skipDays_const_iterator;
  typedef ::xsd::cxx::tree::traits< skipDays_type, char > skipDays_traits;

  const skipDays_sequence&
  skipDays () const;

  skipDays_sequence&
  skipDays ();

  void
  skipDays (const skipDays_sequence& s);

  // item
  // 
  typedef ::tRssItem item_type;
  typedef ::xsd::cxx::tree::sequence< item_type > item_sequence;
  typedef item_sequence::iterator item_iterator;
  typedef item_sequence::const_iterator item_const_iterator;
  typedef ::xsd::cxx::tree::traits< item_type, char > item_traits;

  const item_sequence&
  item () const;

  item_sequence&
  item ();

  void
  item (const item_sequence& s);

  // Constructors.
  //
  tRssChannel ();

  tRssChannel (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::type* c = 0);

  tRssChannel (const tRssChannel& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::type* c = 0);

  virtual tRssChannel*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  private:
  title_sequence title_;
  link_sequence link_;
  description_sequence description_;
  language_sequence language_;
  copyright_sequence copyright_;
  managingEditor_sequence managingEditor_;
  webMaster_sequence webMaster_;
  pubDate_sequence pubDate_;
  lastBuildDate_sequence lastBuildDate_;
  category_sequence category_;
  generator_sequence generator_;
  docs_sequence docs_;
  cloud_sequence cloud_;
  ttl_sequence ttl_;
  image_sequence image_;
  textInput_sequence textInput_;
  skipHours_sequence skipHours_;
  skipDays_sequence skipDays_;
  item_sequence item_;
};

class tSkipHour: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >
{
  public:
  // Constructors.
  //
  tSkipHour (const ::xml_schema::non_negative_integer&);

  tSkipHour (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::type* c = 0);

  tSkipHour (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::type* c = 0);

  tSkipHour (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::type* c = 0);

  tSkipHour (const tSkipHour& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::type* c = 0);

  virtual tSkipHour*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;
};

class tSkipHoursList: public ::xml_schema::type
{
  public:
  // hour
  // 
  typedef ::tSkipHour hour_type;
  typedef ::xsd::cxx::tree::sequence< hour_type > hour_sequence;
  typedef hour_sequence::iterator hour_iterator;
  typedef hour_sequence::const_iterator hour_const_iterator;
  typedef ::xsd::cxx::tree::traits< hour_type, char > hour_traits;

  const hour_sequence&
  hour () const;

  hour_sequence&
  hour ();

  void
  hour (const hour_sequence& s);

  // Constructors.
  //
  tSkipHoursList ();

  tSkipHoursList (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0);

  tSkipHoursList (const tSkipHoursList& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0);

  virtual tSkipHoursList*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  private:
  hour_sequence hour_;
};

class tSkipDay: public ::xml_schema::string
{
  public:
  enum value
  {
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
    Sunday
  };

  tSkipDay (value v);

  tSkipDay (const ::xml_schema::string& v);

  tSkipDay (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0);

  tSkipDay (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0);

  tSkipDay (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0);

  tSkipDay (const tSkipDay& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::type* c = 0);

  virtual tSkipDay*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  tSkipDay&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_tSkipDay_convert ();
  }

  protected:
  value
  _xsd_tSkipDay_convert () const;

  public:
  static const char* const _xsd_tSkipDay_literals_[7];
  static const value _xsd_tSkipDay_indexes_[7];
};

class tSkipDaysList: public ::xml_schema::type
{
  public:
  // day
  // 
  typedef ::tSkipDay day_type;
  typedef ::xsd::cxx::tree::sequence< day_type > day_sequence;
  typedef day_sequence::iterator day_iterator;
  typedef day_sequence::const_iterator day_const_iterator;
  typedef ::xsd::cxx::tree::traits< day_type, char > day_traits;

  const day_sequence&
  day () const;

  day_sequence&
  day ();

  void
  day (const day_sequence& s);

  // Constructors.
  //
  tSkipDaysList ();

  tSkipDaysList (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::type* c = 0);

  tSkipDaysList (const tSkipDaysList& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::type* c = 0);

  virtual tSkipDaysList*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  private:
  day_sequence day_;
};

class tCategory: public ::xml_schema::string
{
  public:
  // domain
  // 
  typedef ::xml_schema::string domain_type;
  typedef ::xsd::cxx::tree::optional< domain_type > domain_optional;
  typedef ::xsd::cxx::tree::traits< domain_type, char > domain_traits;

  const domain_optional&
  domain () const;

  domain_optional&
  domain ();

  void
  domain (const domain_type& x);

  void
  domain (const domain_optional& x);

  void
  domain (::std::auto_ptr< domain_type > p);

  // Constructors.
  //
  tCategory ();

  tCategory (const ::xml_schema::string&);

  tCategory (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::type* c = 0);

  tCategory (const tCategory& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::type* c = 0);

  virtual tCategory*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  private:
  domain_optional domain_;
};

class tImage: public ::xml_schema::type
{
  public:
  // url
  // 
  typedef ::xml_schema::uri url_type;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_type&
  url () const;

  url_type&
  url ();

  void
  url (const url_type& x);

  void
  url (::std::auto_ptr< url_type > p);

  // title
  // 
  typedef ::xml_schema::string title_type;
  typedef ::xsd::cxx::tree::traits< title_type, char > title_traits;

  const title_type&
  title () const;

  title_type&
  title ();

  void
  title (const title_type& x);

  void
  title (::std::auto_ptr< title_type > p);

  // link
  // 
  typedef ::xml_schema::uri link_type;
  typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

  const link_type&
  link () const;

  link_type&
  link ();

  void
  link (const link_type& x);

  void
  link (::std::auto_ptr< link_type > p);

  // width
  // 
  typedef ::tImageWidth width_type;
  typedef ::xsd::cxx::tree::optional< width_type > width_optional;
  typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

  const width_optional&
  width () const;

  width_optional&
  width ();

  void
  width (const width_type& x);

  void
  width (const width_optional& x);

  void
  width (::std::auto_ptr< width_type > p);

  static const width_type&
  width_default_value ();

  // height
  // 
  typedef ::tImageHeight height_type;
  typedef ::xsd::cxx::tree::optional< height_type > height_optional;
  typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

  const height_optional&
  height () const;

  height_optional&
  height ();

  void
  height (const height_type& x);

  void
  height (const height_optional& x);

  void
  height (::std::auto_ptr< height_type > p);

  static const height_type&
  height_default_value ();

  // description
  // 
  typedef ::xml_schema::string description_type;
  typedef ::xsd::cxx::tree::optional< description_type > description_optional;
  typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

  const description_optional&
  description () const;

  description_optional&
  description ();

  void
  description (const description_type& x);

  void
  description (const description_optional& x);

  void
  description (::std::auto_ptr< description_type > p);

  // Constructors.
  //
  tImage (const url_type&,
          const title_type&,
          const link_type&);

  tImage (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0);

  tImage (const tImage& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0);

  virtual tImage*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  private:
  ::xsd::cxx::tree::one< url_type > url_;
  ::xsd::cxx::tree::one< title_type > title_;
  ::xsd::cxx::tree::one< link_type > link_;
  width_optional width_;
  static const width_type width_default_value_;
  height_optional height_;
  static const height_type height_default_value_;
  description_optional description_;
};

class tImageHeight: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
{
  public:
  // Constructors.
  //
  tImageHeight (const ::xml_schema::positive_integer&);

  tImageHeight (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0);

  tImageHeight (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0);

  tImageHeight (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0);

  tImageHeight (const tImageHeight& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0);

  virtual tImageHeight*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;
};

class tImageWidth: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
{
  public:
  // Constructors.
  //
  tImageWidth (const ::xml_schema::positive_integer&);

  tImageWidth (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::type* c = 0);

  tImageWidth (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::type* c = 0);

  tImageWidth (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::type* c = 0);

  tImageWidth (const tImageWidth& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::type* c = 0);

  virtual tImageWidth*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;
};

class tCloud: public ::xml_schema::type
{
  public:
  // domain
  // 
  typedef ::xml_schema::string domain_type;
  typedef ::xsd::cxx::tree::traits< domain_type, char > domain_traits;

  const domain_type&
  domain () const;

  domain_type&
  domain ();

  void
  domain (const domain_type& x);

  void
  domain (::std::auto_ptr< domain_type > p);

  // port
  // 
  typedef ::xml_schema::positive_integer port_type;
  typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

  const port_type&
  port () const;

  port_type&
  port ();

  void
  port (const port_type& x);

  // path
  // 
  typedef ::xml_schema::string path_type;
  typedef ::xsd::cxx::tree::traits< path_type, char > path_traits;

  const path_type&
  path () const;

  path_type&
  path ();

  void
  path (const path_type& x);

  void
  path (::std::auto_ptr< path_type > p);

  // registerProcedure
  // 
  typedef ::xml_schema::string registerProcedure_type;
  typedef ::xsd::cxx::tree::traits< registerProcedure_type, char > registerProcedure_traits;

  const registerProcedure_type&
  registerProcedure () const;

  registerProcedure_type&
  registerProcedure ();

  void
  registerProcedure (const registerProcedure_type& x);

  void
  registerProcedure (::std::auto_ptr< registerProcedure_type > p);

  // protocol
  // 
  typedef ::tCloudProtocol protocol_type;
  typedef ::xsd::cxx::tree::traits< protocol_type, char > protocol_traits;

  const protocol_type&
  protocol () const;

  protocol_type&
  protocol ();

  void
  protocol (const protocol_type& x);

  void
  protocol (::std::auto_ptr< protocol_type > p);

  // Constructors.
  //
  tCloud (const domain_type&,
          const port_type&,
          const path_type&,
          const registerProcedure_type&,
          const protocol_type&);

  tCloud (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0);

  tCloud (const tCloud& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0);

  virtual tCloud*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  private:
  ::xsd::cxx::tree::one< domain_type > domain_;
  ::xsd::cxx::tree::one< port_type > port_;
  ::xsd::cxx::tree::one< path_type > path_;
  ::xsd::cxx::tree::one< registerProcedure_type > registerProcedure_;
  ::xsd::cxx::tree::one< protocol_type > protocol_;
};

class tCloudProtocol: public ::xml_schema::string
{
  public:
  enum value
  {
    xml_rpc,
    http_post,
    soap
  };

  tCloudProtocol (value v);

  tCloudProtocol (const ::xml_schema::string& v);

  tCloudProtocol (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0);

  tCloudProtocol (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0);

  tCloudProtocol (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0);

  tCloudProtocol (const tCloudProtocol& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0);

  virtual tCloudProtocol*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  tCloudProtocol&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_tCloudProtocol_convert ();
  }

  protected:
  value
  _xsd_tCloudProtocol_convert () const;

  public:
  static const char* const _xsd_tCloudProtocol_literals_[3];
  static const value _xsd_tCloudProtocol_indexes_[3];
};

class tTextInput: public ::xml_schema::type
{
  public:
  // title
  // 
  typedef ::xml_schema::string title_type;
  typedef ::xsd::cxx::tree::traits< title_type, char > title_traits;

  const title_type&
  title () const;

  title_type&
  title ();

  void
  title (const title_type& x);

  void
  title (::std::auto_ptr< title_type > p);

  // description
  // 
  typedef ::xml_schema::string description_type;
  typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

  const description_type&
  description () const;

  description_type&
  description ();

  void
  description (const description_type& x);

  void
  description (::std::auto_ptr< description_type > p);

  // name
  // 
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // link
  // 
  typedef ::xml_schema::uri link_type;
  typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

  const link_type&
  link () const;

  link_type&
  link ();

  void
  link (const link_type& x);

  void
  link (::std::auto_ptr< link_type > p);

  // Constructors.
  //
  tTextInput (const title_type&,
              const description_type&,
              const name_type&,
              const link_type&);

  tTextInput (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0);

  tTextInput (const tTextInput& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0);

  virtual tTextInput*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  private:
  ::xsd::cxx::tree::one< title_type > title_;
  ::xsd::cxx::tree::one< description_type > description_;
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< link_type > link_;
};

class tEmailAddress: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  tEmailAddress ();

  tEmailAddress (const ::xml_schema::string&);

  tEmailAddress (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::type* c = 0);

  tEmailAddress (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::type* c = 0);

  tEmailAddress (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::type* c = 0);

  tEmailAddress (const tEmailAddress& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::type* c = 0);

  virtual tEmailAddress*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;
};

class tRfc822FormatDate: public ::xml_schema::string
{
  public:
  // Constructors.
  //
  tRfc822FormatDate ();

  tRfc822FormatDate (const ::xml_schema::string&);

  tRfc822FormatDate (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::type* c = 0);

  tRfc822FormatDate (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::type* c = 0);

  tRfc822FormatDate (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::type* c = 0);

  tRfc822FormatDate (const tRfc822FormatDate& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::type* c = 0);

  virtual tRfc822FormatDate*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;
};

class tSource: public ::xml_schema::string
{
  public:
  // url
  // 
  typedef ::xml_schema::uri url_type;
  typedef ::xsd::cxx::tree::optional< url_type > url_optional;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_optional&
  url () const;

  url_optional&
  url ();

  void
  url (const url_type& x);

  void
  url (const url_optional& x);

  void
  url (::std::auto_ptr< url_type > p);

  // Constructors.
  //
  tSource ();

  tSource (const ::xml_schema::string&);

  tSource (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::type* c = 0);

  tSource (const tSource& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::type* c = 0);

  virtual tSource*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  private:
  url_optional url_;
};

class tEnclosure: public ::xml_schema::string
{
  public:
  // url
  // 
  typedef ::xml_schema::uri url_type;
  typedef ::xsd::cxx::tree::traits< url_type, char > url_traits;

  const url_type&
  url () const;

  url_type&
  url ();

  void
  url (const url_type& x);

  void
  url (::std::auto_ptr< url_type > p);

  // length
  // 
  typedef ::xml_schema::non_negative_integer length_type;
  typedef ::xsd::cxx::tree::traits< length_type, char > length_traits;

  const length_type&
  length () const;

  length_type&
  length ();

  void
  length (const length_type& x);

  // type
  // 
  typedef ::xml_schema::string type_type;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_type&
  type () const;

  type_type&
  type ();

  void
  type (const type_type& x);

  void
  type (::std::auto_ptr< type_type > p);

  // Constructors.
  //
  tEnclosure (const url_type&,
              const length_type&,
              const type_type&);

  tEnclosure (const ::xml_schema::string&,
              const url_type&,
              const length_type&,
              const type_type&);

  tEnclosure (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0);

  tEnclosure (const tEnclosure& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0);

  virtual tEnclosure*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  private:
  ::xsd::cxx::tree::one< url_type > url_;
  ::xsd::cxx::tree::one< length_type > length_;
  ::xsd::cxx::tree::one< type_type > type_;
};

class tGuid: public ::xml_schema::string
{
  public:
  // isPermaLink
  // 
  typedef ::xml_schema::boolean isPermaLink_type;
  typedef ::xsd::cxx::tree::traits< isPermaLink_type, char > isPermaLink_traits;

  const isPermaLink_type&
  isPermaLink () const;

  isPermaLink_type&
  isPermaLink ();

  void
  isPermaLink (const isPermaLink_type& x);

  static const isPermaLink_type&
  isPermaLink_default_value ();

  // Constructors.
  //
  tGuid ();

  tGuid (const ::xml_schema::string&);

  tGuid (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::type* c = 0);

  tGuid (const tGuid& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::type* c = 0);

  virtual tGuid*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::type* c = 0) const;

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  private:
  ::xsd::cxx::tree::one< isPermaLink_type > isPermaLink_;
  static const isPermaLink_type isPermaLink_default_value_;
};

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::tRss >
rss (const ::std::string& uri,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tRss >
rss (const ::std::string& uri,
     ::xml_schema::error_handler& eh,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tRss >
rss (const ::std::string& uri,
     ::xercesc::DOMErrorHandler& eh,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::tRss >
rss (::std::istream& is,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tRss >
rss (::std::istream& is,
     ::xml_schema::error_handler& eh,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tRss >
rss (::std::istream& is,
     ::xercesc::DOMErrorHandler& eh,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tRss >
rss (::std::istream& is,
     const ::std::string& id,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tRss >
rss (::std::istream& is,
     const ::std::string& id,
     ::xml_schema::error_handler& eh,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tRss >
rss (::std::istream& is,
     const ::std::string& id,
     ::xercesc::DOMErrorHandler& eh,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMInputSource.
//

::std::auto_ptr< ::tRss >
rss (const ::xercesc::DOMInputSource& is,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tRss >
rss (const ::xercesc::DOMInputSource& is,
     ::xml_schema::error_handler& eh,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tRss >
rss (const ::xercesc::DOMInputSource& is,
     ::xercesc::DOMErrorHandler& eh,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::tRss >
rss (const ::xercesc::DOMDocument& d,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::tRss >
rss (::xercesc::DOMDocument* d,
     ::xml_schema::flags f = 0,
     const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // RSS_2_0_HXX
