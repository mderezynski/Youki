
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx___home_milosz2_Source_mpx_mpxlib_mpx_mlibman_dbus_hh__ADAPTOR_MARSHAL_H
#define __dbusxx___home_milosz2_Source_mpx_mpxlib_mpx_mlibman_dbus_hh__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace info {
namespace backtrace {
namespace Youki {

class MLibMan_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    MLibMan_adaptor()
    : ::DBus::InterfaceAdaptor("info.backtrace.Youki.MLibMan")
    {
        register_method(MLibMan_adaptor, ShowWindow, _ShowWindow_stub);
        register_method(MLibMan_adaptor, Exit, _Exit_stub);
    }

    ::DBus::IntrospectedInterface *const introspect() const 
    {
        static ::DBus::IntrospectedArgument ShowWindow_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Exit_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ScanStart_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ScanEnd_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument NewAlbum_args[] = 
        {
            { 0, "x", false },
            { 0, "s", false },
            { 0, "s", false },
            { 0, "s", false },
            { 0, "s", false },
            { 0, "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod MLibMan_adaptor_methods[] = 
        {
            { "ShowWindow", ShowWindow_args },
            { "Exit", Exit_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod MLibMan_adaptor_signals[] = 
        {
            { "ScanStart", ScanStart_args },
            { "ScanEnd", ScanEnd_args },
            { "NewAlbum", NewAlbum_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty MLibMan_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface MLibMan_adaptor_interface = 
        {
            "info.backtrace.Youki.MLibMan",
            MLibMan_adaptor_methods,
            MLibMan_adaptor_signals,
            MLibMan_adaptor_properties
        };
        return &MLibMan_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual void ShowWindow() = 0;
    virtual void Exit() = 0;

public:

    /* signal emitters for this interface
     */
    void ScanStart()
    {
        ::DBus::SignalMessage sig("ScanStart");
        emit_signal(sig);
    }
    void ScanEnd()
    {
        ::DBus::SignalMessage sig("ScanEnd");
        emit_signal(sig);
    }
    void NewAlbum(const int64_t& arg1, const std::string& arg2, const std::string& arg3, const std::string& arg4, const std::string& arg5, const std::string& arg6)
    {
        ::DBus::SignalMessage sig("NewAlbum");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        wi << arg4;
        wi << arg5;
        wi << arg6;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _ShowWindow_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        ShowWindow();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _Exit_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        Exit();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } } 
#endif//__dbusxx___home_milosz2_Source_mpx_mpxlib_mpx_mlibman_dbus_hh__ADAPTOR_MARSHAL_H
